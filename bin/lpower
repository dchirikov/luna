#!/usr/bin/env python
'''
Written by Dmitry Chirikov <dmitry@chirikov.ru>
This file is part of Luna, cluster provisioning tool
https://github.com/dchirikov/luna

This file is part of Luna.

Luna is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Luna is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Luna.  If not, see <http://www.gnu.org/licenses/>.

'''

import logging
import hostlist
import argparse
import subprocess
import threading
import luna


class ChassisAction(threading.Thread):

    def __init__(self, nodename=None, op=None):
        threading.Thread.__init__(self)
        self.op = None

        ops = ['on', 'off', 'reset', 'cycle', 'status',
               'identify', 'noidentify']

        if op in ops:
            self.op = op

        try:
            node = luna.Node(name=nodename)
        except RuntimeError:
            self.op = None

        if self.op:
            try:
                self.bmcip = node.install_params['bmcsetup']['ip']
            except KeyError:
                log.info("No BMC setup configured for '{}'".format(nodename))
                self.op = None

        if self.op:
            self.nodename = nodename
            self.bmcip = node.install_params['bmcsetup']['ip']
            self.user = node.install_params['bmcsetup']['user']
            self.password = node.install_params['bmcsetup']['password']

    def run(self):

        if not self.op:
            return None

        cmd = ['/usr/bin/ipmitool', '-I', 'lanplus',
               '-H', self.bmcip,
               '-U', self.user,
               '-P', self.password,
               'chassis']

        if self.op in ['on', 'off', 'reset', 'cycle']:
            cmd.extend(['power', self.op])

        elif self.op == 'status':
            cmd.extend([self.op])

        elif self.op == 'identify':
            cmd.extend([self.op, '255'])  # longest interval it allows

        elif self.op == 'noidentify':
            cmd.extend(['identify', '0'])

        ipmi_proc = subprocess.Popen(cmd,
                                     stdout=subprocess.PIPE,
                                     stderr=subprocess.STDOUT)

        while ipmi_proc.poll() is None:
            line = ipmi_proc.stdout.readline().strip()

            if line[:12] == 'System Power':
                print self.nodename + ': ' + line.split(" ")[-1]

            if line[:5] == 'Error':
                print self.nodename + ': ' + line

        if self.op in ['on', 'off', 'reset', 'cycle']:
            print self.nodename + ': ' + self.op


parser = argparse.ArgumentParser(prog='lpower',
                                 description='BMC power management.')

parser.add_argument('hosts', type=str, help='Host list', nargs='?')
parser.add_argument('--groups', '-g', type=str, help='Group list')
parser.add_argument('action',
                    choices=('status', 'on', 'off', 'reset',
                             'cycle', 'identify', 'noidentify'),
                    help='Action')


if __name__ == '__main__':
    log = logging.getLogger('lpower')
    args = parser.parse_args()

    threads = []

    if args.hosts:
        hosts = hostlist.expand_hostlist(args.hosts)

        for host in hosts:
            ca = ChassisAction(host, args.action)
            ca.start()
            threads.append(ca)

    if args.groups:
        groups = hostlist.expand_hostlist(args.groups)

        for group in groups:

            try:
                g = luna.Group(name=group)
            except RuntimeError:
                continue

            hosts = g.list_nodes().keys()

            for host in hosts:
                ca = ChassisAction(host, args.action)
                ca.start()
                threads.append(ca)
